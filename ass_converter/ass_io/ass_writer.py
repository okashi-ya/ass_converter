import copy
import datetime
import os.path

import numpy
from config import AssConverterConfig
from log.logger import Logger

'''
writer_danmu_data 结构：
    {
        dst_file_name: {
            "start_time": float
            "data" = [
                ... # 弹幕数据
            ]
        }
    }...
'''


# ass
class AssWriter:
    def __init__(self):
        self.writer_danmu_data = dict()

    def add_danmu_data(self, danmu_data):
        # 添加从Loader.get_danmu_data()返回的弹幕数据
        danmu_data_this_file = self.writer_danmu_data.get(danmu_data["dst_file_name"])
        if danmu_data_this_file is None:
            # 还没有该文件的记录
            self.writer_danmu_data[danmu_data["dst_file_name"]] = dict()
            self.writer_danmu_data[danmu_data["dst_file_name"]]["start_time"] = danmu_data["start_time"]
            self.writer_danmu_data[danmu_data["dst_file_name"]]["data"] = danmu_data["data"]
        else:
            # 比较时间
            time_this_file = danmu_data_this_file["start_time"]
            time_danmu_data = danmu_data["start_time"]
            offset = abs(time_this_file - time_danmu_data)
            if time_this_file > time_danmu_data:
                # 已有记录中的时间更大 说明已有记录更靠后 需要将已有记录中所有时间增大offset
                for single_data in danmu_data_this_file["data"]:
                    single_data["time"] = round(single_data["time"] + offset, 2)  # 保留两位小数
            elif time_this_file < time_danmu_data:
                # 参数传递进来的时间更大 说明已有纪录更靠前 需要将参数传递进来的所有时间增大offset
                # 拷贝一份 不影响源数据
                dc_danmu_data = copy.deepcopy(danmu_data)
                for single_data in dc_danmu_data["data"]:
                    single_data["time"] = round(single_data["time"] + offset, 2)  # 保留两位小数
                danmu_data = dc_danmu_data
            # 合并
            danmu_data_this_file["data"] = numpy.hstack((danmu_data_this_file["data"], danmu_data["data"]))

    def write(self):
        ass_head = ""
        ass_head += "[Script Info]\n"
        ass_head += "; Script generated by Aegisub 3.2.2\n"
        ass_head += "; http://www.aegisub.org/\n"
        ass_head += "Title: Default Aegisub file\n"
        ass_head += "ScriptType: v4.00+\n"
        ass_head += "WrapStyle: 0\n"
        ass_head += "ScaledBorderAndShadow: yes\n"
        ass_head += "YCbCr Matrix: None\n"
        ass_head += "\n"
        ass_head += "[Aegisub Project Garbage]\n"
        ass_head += "Last Style Storage: Default\n"
        ass_head += "Active Line: 5\n"
        ass_head += "\n"
        ass_head += "[Events]\n"
        ass_head += "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"

        if not os.path.exists(AssConverterConfig.OutputDir):
            Logger.info("未检测到目标目录，已自动创建")
            os.makedirs(AssConverterConfig.OutputDir)

        cur_index = 1
        # 将所有弹幕数据写入到文件中
        for file_name, file_data in self.writer_danmu_data.items():
            Logger.info(f"开始写入弹幕文件，共计{len(self.writer_danmu_data)}个，当前写入第{cur_index}个")
            cp_file_data = copy.deepcopy(file_data["data"])
            sorted(cp_file_data, key=lambda x: x["time"])  # 按时间排序

            # 时间字符串
            time_ymd = datetime.datetime.fromtimestamp(file_data["start_time"]).strftime("%Y-%m-%d")
            f = open(f"{AssConverterConfig.OutputDir}ass_converter {time_ymd} {file_name}", "wb")
            f.write(ass_head.encode("utf-8"))
            for single_danmu_data in cp_file_data:
                f.write(self.__single_danmu_data_to_ass_line(single_danmu_data))
            f.close()

            cur_index += 1

    @classmethod
    def __single_danmu_data_to_ass_line(cls, single_data):
        # 单个弹幕数据转换成ass的一行数据
        time_s = single_data["time"]
        text = single_data["text"]
        time_str_start = cls.__get_ass_time_str(time_s)
        time_str_end = cls.__get_ass_time_str(time_s + 10)    # 开始到结束共10s
        return f"Dialogue: 0,{time_str_start},{time_str_end},Default,,0,0,0,,{text}\n".encode("utf-8")

    @classmethod
    def __get_ass_time_str(cls, time_ms):
        ms = int(time_ms * 100 % 100)
        minute, sec = divmod(time_ms, 60)
        hour, minute = divmod(minute, 60)
        return "%d:%02d:%02d.%02d" % (hour, minute, sec, ms)

    writer_danmu_data: dict
